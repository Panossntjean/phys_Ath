`Problem 1 Code` :

import numpy as np
import matplotlib.pyplot as plt
import math as mt

l=(mt.log(2)/2)
def mAf(t,x) : return -l*x

#RUNGE KUTTA 2nd Order
print('RUNGE KUTTA 2nd Order')
A  = 1
dA = 0
t  = 0
k  = 0
dt = 0.8
while t < 8-dt :
    A    += dt*mAf(t+dt/2,A+dt/2*mAf(t,A))
    t    += dt
    #Uncertainty dA is
    k    += 1
    dA    = (1/dt)*((A/k)-A)
    print(A,'+-',dA)


#RUNGE KUTTA 4th Order
print('RUNGE KUTTA 4th Order')
a = []
A  = 1
dA = 0 
t  = 0
k  = 0
k1 = 0
k2 = 0
k3 = 0
k4 = 0
while t < 8 : 
    k1 = dt*mAf(t,A)
    k2 = dt*mAf(t+dt/2,A+k1/2)
    k3 = dt*mAf(t+dt/2,A+k2/2)
    k4 = dt*mAf(t+dt,A+k3)
    A += (k1+2*k2+2*k3+k4)/6
    a += [A]
    t += dt
    k += 1
    dA = (1/dt)*((A/k)-A)
    print(A,'+-',dA)

#for some reason i dind the uncertainty too big but i can't find where the problem is...maybe something in my equation of dA


#Lets see our plot for the calculation of the value A 
lol=np.array(a)
#the exact value of our solution at 0<t<8sec will be : A=e**{-(ln2)*4}=e**-2.7725887222397812376689284858327=1/16=0.0625
exactv=0.0625 #shown as '*'
ev=np.array(exactv)
plt.plot(lol,marker = 'o') + plt.plot(ev,'*r')
plt.xlabel('t(s)')
plt.ylabel('A(kBq)')
plt.show()


#this is the comparison //but is it good ? or we can't do it like this?
t = np.linspace(0, 8, 400)
y =np.exp(-((mt.log(2))/2)*t)
plt.plot(lol,marker = 'o') + plt.plot(t,y)
plt.xlabel('t(s)')
plt.ylabel('A(kBq)')
plt.show()


`problem 1 print out`:

RUNGE KUTTA 2nd Order
0.7611773688894781 +- 0.0
0.5793909869095085 +- -0.3621193668184428
0.44101930697405767 +- -0.3675160891450481
0.3356939157119742 +- -0.3147130459799758
0.2555226115138467 +- -0.2555226115138467
0.19449802912387806 +- -0.2026021136707063
0.14804749806270256 +- -0.1586223193528956
0.11269040504603803 +- -0.1232551305191041
0.08577738601203277 +- -0.09530820668003641
0.06529180499485622 +- -0.07345328061921325
RUNGE KUTTA 4th Order
0.7578713300400847 +- 0.0
0.574368952896727 +- -0.35898059556045436
0.4352977622655732 +- -0.36274813522131105
0.32989969405168257 +- -0.30928096317345244
0.25002151991076565 +- -0.25002151991076565
0.1894841418334155 +- -0.1973793144098078
0.14360459859279465 +- -0.1538620699208514
0.10883380813539376 +- -0.11903697764808692
0.08248202292489826 +- -0.09164669213877584
0.06251076041848941 +- -0.07032460547080058
0.04737511314017765 +- -0.05383535584111096


and the 2 plots




`PROBLEM 2 CODE`:

import numpy as np
import matplotlib.pyplot as plt
import math as mt

#A)
#N   = 2000 #how many steps i chose to make
dt  = 0.01 #2/N # the step
x   = 0
y   = 0
xax =[]
yax =[]
vo  = 20
g   = 10
θ   = mt.pi/6
vx = vo*mt.cos(θ)
vy = vo*mt.sin(θ)

while y > -1 :
    xax +=[x]
    yax +=[y]
    x  += vx*dt
    vy += (-g*dt)
    y  += vy*dt
    if y <= 0 : break 

    
xaxi=np.array(xax)
yaxi=np.array(yax)
plt.plot(xaxi,yaxi,color = 'r')
plt.title('The trajectory of the particle')
plt.xlabel('x(m)')
plt.ylabel('y(m)')
plt.grid()
plt.show()



`the print out is just the plot`